Execute (global variables are set):
  Assert exists('g:lengthmatters_on_by_default')
  Assert exists('g:lengthmatters_match_name')
  Assert exists('g:lengthmatters_colors')
  Assert exists('g:lengthmatters_start_at_column')
  Assert exists('g:lengthmatters_excluded')


Execute (global functions are provided):
  Assert exists('*LengthmattersEnable')
  Assert exists('*LengthmattersDisable')
  Assert exists('*LengthmattersToggle')
  Assert exists('*LengthmattersEnableAll')
  Assert exists('*LengthmattersDisableAll')


Execute (a global toggle command is provided):
  Assert exists(':LengthmattersEnable')
  Assert exists(':LengthmattersDisable')
  Assert exists(':LengthmattersToggle')
  Assert exists(':LengthmattersEnableAll')
  Assert exists(':LengthmattersDisableAll')


Execute (LengthmattersEnable() forces enabling of the plugin):
  call LengthmattersEnable()
  Assert exists('w:lengthmatters_active')
  Assert w:lengthmatters_active


Execute (LengthmattersEnable() always creates an hl group):
  call LengthmattersEnable()
  Assert hlexists(g:lengthmatters_match_name)


Execute (LengthmattersEnable() doens't create more than one match per window):
  let number_of_matches = len(getmatches())
  call LengthmattersEnable()
  call LengthmattersEnable()
  call LengthmattersEnable()
  AssertEqual number_of_matches, len(getmatches())


Execute (LengthmattersDisable() forces disabling of the plugin):
  call LengthmattersDisable()
  Assert exists('w:lengthmatters_active')
  Assert !w:lengthmatters_active


Execute (LengthmattersDisable() deletes a match if present):
  let number_of_matches = len(getmatches())
  call LengthmattersEnable()
  call LengthmattersDisable()
  AssertEqual number_of_matches, len(getmatches())


Execute (Lengthmatter is inactive in the excluded filetypes):
  let g:lengthmatters_excluded = ['foobar']
  set filetype=foobar

  call LengthmattersDisable()
  call LengthmattersEnable()

  Assert !w:lengthmatters_active
