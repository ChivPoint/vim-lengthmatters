Execute (a variable shows that the plugin has been loaded):
  Assert g:loaded_lengthmatters


Execute (global variables are set):
  Assert exists('g:lengthmatters_on_by_default')
  Assert exists('g:lengthmatters_match_name')
  Assert exists('g:lengthmatters_colors')
  Assert exists('g:lengthmatters_start_at_column')
  Assert exists('g:lengthmatters_excluded')
  Assert exists('g:lengthmatters_use_textwidth')


Execute (global commands are provided):
  Assert exists(':LengthmattersEnable')
  Assert exists(':LengthmattersDisable')
  Assert exists(':LengthmattersToggle')
  Assert exists(':LengthmattersEnableAll')
  Assert exists(':LengthmattersDisableAll')


Execute (LengthmattersEnable() forces enabling of the plugin):
  LengthmattersEnable
  Assert exists('b:lengthmatters_active')
  Assert b:lengthmatters_active


Execute (LengthmattersEnable() always creates an hl group):
  LengthmattersEnable
  Assert hlexists(g:lengthmatters_match_name)


Execute (LengthmattersDisable() forces disabling of the plugin):
  LengthmattersDisable
  Assert exists('b:lengthmatters_active')
  Assert !b:lengthmatters_active


Execute (LengthmattersDisable() deletes a match if present):
  let number_of_matches = len(getmatches())
  LengthmattersEnable
  LengthmattersDisable
  AssertEqual number_of_matches, len(getmatches())


Execute (Lengthmatter is inactive in the excluded filetypes):
  let g:lengthmatters_excluded = ['foobar']

  set filetype=foobar
  Assert !b:lengthmatters_active

  LengthmattersDisable
  LengthmattersEnable
  Assert !b:lengthmatters_active
